# Generated by Django 4.2.23 on 2025-08-19 22:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('JLTsite', '0007_deliverysettings_user_driver_license_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('event_name', models.CharField(max_length=200, verbose_name="Nom de l'événement")),
                ('event_description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('confirmed', 'Confirmé'), ('in_progress', 'En cours'), ('completed', 'Terminé'), ('cancelled', 'Annulé')], default='draft', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('normal', 'Normale'), ('high', 'Haute'), ('urgent', 'Urgente')], default='normal', max_length=20)),
                ('setup_start_time', models.DateTimeField(verbose_name='Début installation')),
                ('event_start_time', models.DateTimeField(verbose_name='Début événement')),
                ('event_end_time', models.DateTimeField(verbose_name='Fin événement')),
                ('cleanup_end_time', models.DateTimeField(verbose_name='Fin nettoyage')),
                ('venue_name', models.CharField(blank=True, max_length=200, verbose_name='Nom du lieu')),
                ('venue_contact', models.CharField(blank=True, max_length=100, verbose_name='Contact lieu')),
                ('venue_phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone lieu')),
                ('venue_instructions', models.TextField(blank=True, verbose_name="Instructions d'accès")),
                ('equipment_needed', models.TextField(blank=True, verbose_name='Équipements nécessaires')),
                ('special_requirements', models.TextField(blank=True, verbose_name='Exigences spéciales')),
                ('contract_file', models.FileField(blank=True, null=True, upload_to='contracts/')),
                ('layout_plan', models.ImageField(blank=True, null=True, upload_to='event_plans/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_validated', models.BooleanField(default=False, verbose_name='Validé')),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': "Contrat d'événement",
                'verbose_name_plural': "Contrats d'événements",
                'ordering': ['event_start_time'],
            },
        ),
        migrations.CreateModel(
            name='KitchenProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du produit')),
                ('category', models.CharField(choices=[('viandes', 'Viandes'), ('poissons', 'Poissons'), ('legumes', 'Légumes'), ('fruits', 'Fruits'), ('cereales', 'Céréales'), ('laitiers', 'Produits laitiers'), ('epices', 'Épices et condiments'), ('huiles', 'Huiles et vinaigres'), ('conserves', 'Conserves'), ('surgeles', 'Surgelés'), ('autres', 'Autres')], max_length=20, verbose_name='Catégorie')),
                ('unit', models.CharField(choices=[('kg', 'Kilogramme'), ('g', 'Gramme'), ('l', 'Litre'), ('ml', 'Millilitre'), ('unite', 'Unité'), ('boite', 'Boîte'), ('sachet', 'Sachet')], max_length=10, verbose_name='Unité')),
                ('current_stock', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Stock actuel')),
                ('min_stock', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Stock minimum')),
                ('max_stock', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Stock maximum')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix unitaire')),
                ('departments', models.JSONField(default=list, verbose_name='Départements utilisateurs')),
                ('shelf_life_days', models.IntegerField(default=7, verbose_name='Durée de conservation (jours)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Produit cuisine',
                'verbose_name_plural': 'Produits cuisine',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='KitchenProduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date de production')),
                ('department', models.CharField(choices=[('patisserie', 'Pâtisserie'), ('chaud', 'Cuisine Chaude'), ('sandwichs', 'Sandwichs'), ('boites', 'Boîtes à lunch'), ('salades', 'Salades'), ('dejeuners', 'Déjeuners'), ('bouchees', 'Bouchées')], max_length=20, verbose_name='Département')),
                ('status', models.CharField(choices=[('not_started', 'Non commencée'), ('in_progress', 'En cours'), ('completed', 'Terminée'), ('delayed', 'En retard')], default='not_started', max_length=20)),
                ('total_items', models.IntegerField(default=0, verbose_name="Total d'articles")),
                ('completed_items', models.IntegerField(default=0, verbose_name='Articles terminés')),
                ('progress_percentage', models.IntegerField(default=0, verbose_name="Pourcentage d'avancement")),
                ('notes', models.TextField(blank=True, verbose_name='Notes de production')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Production cuisine',
                'verbose_name_plural': 'Productions cuisine',
                'ordering': ['date', 'department'],
            },
        ),
        migrations.CreateModel(
            name='ProductionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_to_produce', models.IntegerField(verbose_name='Quantité à produire')),
                ('quantity_produced', models.IntegerField(default=0, verbose_name='Quantité produite')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Terminé')),
                ('is_priority', models.BooleanField(default=False, verbose_name='Prioritaire')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Commencé à')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé à')),
                ('production_notes', models.TextField(blank=True, verbose_name='Notes de production')),
                ('quality_notes', models.TextField(blank=True, verbose_name='Notes qualité')),
                ('has_issue', models.BooleanField(default=False, verbose_name='Problème signalé')),
                ('issue_description', models.TextField(blank=True, verbose_name='Description du problème')),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='JLTsite.orderitem', verbose_name='Article de commande')),
            ],
            options={
                'verbose_name': 'Article de production',
                'verbose_name_plural': 'Articles de production',
                'ordering': ['is_priority', 'order_item__order__delivery_date', 'order_item__order__delivery_time'],
            },
        ),
        migrations.CreateModel(
            name='ProductOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('department', models.CharField(choices=[('patisserie', 'Pâtisserie'), ('chaud', 'Cuisine Chaude'), ('sandwichs', 'Sandwichs'), ('boites', 'Boîtes à lunch'), ('salades', 'Salades'), ('dejeuners', 'Déjeuners'), ('bouchees', 'Bouchées'), ('general', 'Général')], max_length=20, verbose_name='Département')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('pending', "En attente d'approbation"), ('approved', 'Approuvée'), ('ordered', 'Commandée'), ('received', 'Reçue'), ('cancelled', 'Annulée')], default='draft', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('normal', 'Normale'), ('high', 'Haute'), ('urgent', 'Urgente')], default='normal', max_length=20)),
                ('needed_date', models.DateField(verbose_name='Date souhaitée')),
                ('delivery_date', models.DateField(blank=True, null=True, verbose_name='Date de livraison')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Notes internes')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Montant total')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Commande produit',
                'verbose_name_plural': 'Commandes produits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du fournisseur')),
                ('contact_name', models.CharField(blank=True, max_length=100, verbose_name='Nom du contact')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('specialties', models.JSONField(default=list, verbose_name='Spécialités')),
                ('min_order_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Commande minimum')),
                ('delivery_days', models.CharField(blank=True, max_length=200, verbose_name='Jours de livraison')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Fournisseur',
                'verbose_name_plural': 'Fournisseurs',
                'ordering': ['name'],
            },
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('customer', 'Client'), ('staff', 'Personnel'), ('admin', 'Administrateur'), ('checklist_manager', 'Checklist'), ('delivery_manager', 'Responsable Livraison'), ('delivery_driver', 'Livreur'), ('maitre_hotel', "Maître d'hôtel"), ('head_chef', 'Chef de cuisine'), ('department_chef', 'Chef de département'), ('cook', 'Cuisinier')], default='customer', max_length=20),
        ),
        migrations.CreateModel(
            name='QualityCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appearance_rating', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Apparence')),
                ('taste_rating', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Goût')),
                ('texture_rating', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Texture')),
                ('overall_rating', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Note globale')),
                ('meets_standards', models.BooleanField(default=True, verbose_name='Conforme aux standards')),
                ('approved_for_service', models.BooleanField(default=True, verbose_name='Approuvé pour le service')),
                ('comments', models.TextField(blank=True, verbose_name='Commentaires')),
                ('improvement_notes', models.TextField(blank=True, verbose_name="Points d'amélioration")),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
                ('checked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_checks_performed', to=settings.AUTH_USER_MODEL)),
                ('production_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_checks', to='JLTsite.productionitem')),
            ],
            options={
                'verbose_name': 'Contrôle qualité',
                'verbose_name_plural': 'Contrôles qualité',
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantité')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix unitaire')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix total')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('received_quantity', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Quantité reçue')),
                ('received_at', models.DateTimeField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='JLTsite.productorder')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='JLTsite.kitchenproduct')),
            ],
            options={
                'verbose_name': 'Article commande',
                'verbose_name_plural': 'Articles commande',
            },
        ),
        migrations.AddField(
            model_name='productorder',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_orders_approved', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productorder',
            name='requested_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_orders_requested', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='productorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='JLTsite.supplier', verbose_name='Fournisseur'),
        ),
        migrations.AddField(
            model_name='productionitem',
            name='produced_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='produced_items', to=settings.AUTH_USER_MODEL, verbose_name='Produit par'),
        ),
        migrations.AddField(
            model_name='productionitem',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='production_items', to='JLTsite.kitchenproduction'),
        ),
        migrations.AddField(
            model_name='kitchenproduction',
            name='department_chef',
            field=models.ForeignKey(limit_choices_to={'role__in': ['department_chef', 'head_chef']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_productions', to=settings.AUTH_USER_MODEL, verbose_name='Chef de département'),
        ),
        migrations.AddField(
            model_name='kitchenproduct',
            name='supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='JLTsite.supplier', verbose_name='Fournisseur principal'),
        ),
        migrations.CreateModel(
            name='KitchenNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('low_stock', 'Stock faible'), ('production_delay', 'Retard de production'), ('quality_issue', 'Problème qualité'), ('order_urgent', 'Commande urgente'), ('equipment_issue', 'Problème équipement'), ('general', 'Général')], max_length=20)),
                ('recipient_type', models.CharField(choices=[('head_chef', 'Chef de cuisine'), ('department_chef', 'Chef de département'), ('cook', 'Cuisinier'), ('all_kitchen', 'Toute la cuisine')], max_length=20)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Urgent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('product_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='JLTsite.productorder')),
                ('production_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='JLTsite.productionitem')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kitchen_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification cuisine',
                'verbose_name_plural': 'Notifications cuisine',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='Horodatage')),
                ('action_type', models.CharField(choices=[('setup_start', 'Début installation'), ('setup_complete', 'Installation terminée'), ('staff_arrival', 'Arrivée personnel'), ('event_start', 'Début événement'), ('service_issue', 'Problème service'), ('client_request', 'Demande client'), ('event_end', 'Fin événement'), ('cleanup_start', 'Début nettoyage'), ('cleanup_complete', 'Nettoyage terminé'), ('departure', 'Départ'), ('other', 'Autre')], max_length=20)),
                ('description', models.TextField(verbose_name='Description')),
                ('is_important', models.BooleanField(default=False, verbose_name='Important')),
                ('is_issue', models.BooleanField(default=False, verbose_name='Problème')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeline', to='JLTsite.eventcontract')),
            ],
            options={
                'verbose_name': 'Événement timeline',
                'verbose_name_plural': 'Événements timeline',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EventStaffAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('server', 'Serveur'), ('bartender', 'Barman'), ('chef', 'Chef'), ('assistant', 'Assistant'), ('setup', 'Installation'), ('cleanup', 'Nettoyage')], max_length=20)),
                ('arrival_time', models.DateTimeField(verbose_name="Heure d'arrivée")),
                ('departure_time', models.DateTimeField(verbose_name='Heure de départ')),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('checked_in', models.BooleanField(default=False)),
                ('checked_in_at', models.DateTimeField(blank=True, null=True)),
                ('checked_out', models.BooleanField(default=False)),
                ('checked_out_at', models.DateTimeField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_assignments', to='JLTsite.eventcontract')),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assignment personnel',
                'verbose_name_plural': 'Assignments personnel',
                'unique_together': {('event', 'staff_member')},
            },
        ),
        migrations.CreateModel(
            name='EventReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('overall_rating', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Note générale')),
                ('client_satisfaction', models.IntegerField(choices=[(1, 'Très mauvais'), (2, 'Mauvais'), (3, 'Moyen'), (4, 'Bon'), (5, 'Excellent')], verbose_name='Satisfaction client')),
                ('setup_notes', models.TextField(verbose_name='Notes installation')),
                ('service_notes', models.TextField(verbose_name='Notes service')),
                ('cleanup_notes', models.TextField(verbose_name='Notes nettoyage')),
                ('issues_encountered', models.TextField(blank=True, verbose_name='Problèmes rencontrés')),
                ('solutions_applied', models.TextField(blank=True, verbose_name='Solutions appliquées')),
                ('staff_performance', models.TextField(blank=True, verbose_name='Performance équipe')),
                ('staff_feedback', models.TextField(blank=True, verbose_name='Retours équipe')),
                ('client_feedback', models.TextField(blank=True, verbose_name='Retours client')),
                ('client_complaints', models.TextField(blank=True, verbose_name='Plaintes client')),
                ('client_compliments', models.TextField(blank=True, verbose_name='Compliments client')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recommandations')),
                ('improvements_needed', models.TextField(blank=True, verbose_name='Améliorations nécessaires')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('submitted', 'Soumis'), ('approved', 'Approuvé')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_approved', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='final_report', to='JLTsite.eventcontract')),
            ],
            options={
                'verbose_name': "Rapport d'événement",
                'verbose_name_plural': "Rapports d'événements",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='event_photos/%Y/%m/%d/')),
                ('photo_type', models.CharField(choices=[('setup', 'Installation'), ('service', 'Service'), ('decoration', 'Décoration'), ('food', 'Nourriture'), ('guests', 'Invités'), ('staff', 'Équipe'), ('cleanup', 'Nettoyage'), ('issue', 'Problème'), ('before', 'Avant'), ('after', 'Après')], max_length=20)),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Légende')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('taken_at', models.DateTimeField(auto_now_add=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='JLTsite.eventcontract')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='JLTsite.eventreport')),
                ('taken_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Photo d'événement",
                'verbose_name_plural': "Photos d'événement",
                'ordering': ['taken_at'],
            },
        ),
        migrations.AddField(
            model_name='eventcontract',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contracts_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventcontract',
            name='maitre_hotel',
            field=models.ForeignKey(limit_choices_to={'role': 'maitre_hotel'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_events', to=settings.AUTH_USER_MODEL, verbose_name="Maître d'hôtel assigné"),
        ),
        migrations.AddField(
            model_name='eventcontract',
            name='order',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='event_contract', to='JLTsite.order'),
        ),
        migrations.AddField(
            model_name='eventcontract',
            name='service_staff',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role': 'staff'}, related_name='events_as_staff', through='JLTsite.EventStaffAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventcontract',
            name='validated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contracts_validated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CookProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_department', models.CharField(choices=[('patisserie', 'Pâtisserie'), ('chaud', 'Cuisine Chaude'), ('sandwichs', 'Sandwichs'), ('boites', 'Boîtes à lunch'), ('salades', 'Salades'), ('dejeuners', 'Déjeuners'), ('bouchees', 'Bouchées')], max_length=20, verbose_name='Département principal')),
                ('secondary_departments', models.JSONField(default=list, verbose_name='Départements secondaires')),
                ('specialties', models.JSONField(default=list, verbose_name='Spécialités')),
                ('skill_level', models.IntegerField(default=1, verbose_name='Niveau de compétence (1-5)')),
                ('shift_start', models.TimeField(default='06:00', verbose_name='Début de service')),
                ('shift_end', models.TimeField(default='14:00', verbose_name='Fin de service')),
                ('total_items_produced', models.IntegerField(default=0, verbose_name="Total d'articles produits")),
                ('average_quality_score', models.DecimalField(decimal_places=1, default=0, max_digits=3, verbose_name='Score qualité moyen')),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cook_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil cuisinier',
                'verbose_name_plural': 'Profils cuisiniers',
            },
        ),
        migrations.AlterUniqueTogether(
            name='kitchenproduction',
            unique_together={('date', 'department')},
        ),
        migrations.CreateModel(
            name='EventNotifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('new_event', 'Nouvel événement'), ('event_updated', 'Événement modifié'), ('reminder', 'Rappel'), ('issue', 'Problème signalé'), ('staff_update', 'Mise à jour personnel'), ('status_change', 'Changement de statut')], max_length=20, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Urgent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('scheduled_for', models.DateTimeField(blank=True, null=True, verbose_name='Programmée pour')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Envoyée le')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='JLTsite.eventcontract', verbose_name='Événement')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Destinataire')),
            ],
            options={
                'verbose_name': "Notification d'événement",
                'verbose_name_plural': "Notifications d'événement",
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', 'is_read'], name='JLTsite_eve_recipie_f3cbc7_idx'), models.Index(fields=['created_at'], name='JLTsite_eve_created_c06b66_idx')],
            },
        ),
    ]
